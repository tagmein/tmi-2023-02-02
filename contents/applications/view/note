return `
<script>
${TMI.clientSource}

async function load() {
  const baseFolder = ['.private', TMI.clientKey, 'incept']
  await TMI.createFolder(baseFolder)
  const { contents } = await TMI.list([...baseFolder, 'notes'])
  return JSON.parse(contents)
}

const noteHtml = (note, indentation) => {
  return ${'`'}
<div class="note" style="background-color:\${note.color};margin-left:\${indentation * 2}rem;" id="note-\${note.id}">
  <label>
    <input type="checkbox" \${note.checked ? 'checked="true"' : ''} />
    <span>\${note.name}</span>
  </label>
</div>
  ${'`'}
}

const renderNoteTree = (note, notesById, indentation) => {
  return [
    noteHtml(note, indentation),
    ...(note.items?.map(item => notesById[item]).filter(item => !!item?.name)?.map(item => renderNoteTree(item, notesById, indentation + 1)) ?? [])
  ].join('')
}

const reload = async () => {
  const notes = await load()
  const notesById = {}
  notes.forEach(note => {
    notesById[note.id] = note
  })
  notes.forEach(note => {
    note.items?.forEach(itemId => {
      const item = notesById[itemId]
      if (item) {
        item.parent = note
      }
    })
  })

  console.log(notesById)
  
  const sectionHTML = notes.filter(note => !note.parent && !!note.name).map(note => renderNoteTree(note, notesById, 0)).join('')
  document.getElementById('notes').innerHTML = sectionHTML
}

setInterval(async () => {
  reload()
}, 5000)

reload()
</script>
<style>
section {
  width: 50vw;
  margin: auto;
}

.note {
  margin-top: 1rem;
  border-radius: 1rem;
  padding: 1rem;
  background-color: white;
  background-image: -webkit-linear-gradient(rgba(255, 255, 255, 0.25), transparent);
  color: black;
}
</style>
<section id="notes"></section>
`
